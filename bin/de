#!/usr/bin/env ruby

puts(<<HELP) || exit(1) if ARGV.empty?

de is a solution to manageme environment variables on development machines.
It transverses the parents of the present working directory, concatenates any
.env files found, and runs the given command. Optionally set NAME to also load
files of the pattern .env.{NAME}

Usage: de {command}
       NAME={env name} de {command}

Precedence order.
  1) Inline shell variables. eg: "FOO=1 de env | grep FOO" will return 1.
  2) shell process variables. eg: "export FOO=1"
  3) $PWD/.env.{NAME}
  4) $PWD/.env
  5) $PWD/../.env.{NAME}
  6) $PWD/../.env
  7) and so on until the root directory

Tip: You may want to consider having ".env.local" files and also setting
"export NAME=local" in your shell rc file.

Valid variable formats (anything else will be ignored):

  KEY=value
  KEY=value with spaces
  KEY="double quoted
  multiline
  value"
  KEY='single quoted
  multiline
  value'
HELP

require 'pathname'
env = Pathname.pwd.ascend
  .reduce([]) {|a, x| a << x.join(".env.#{ENV['NAME']}") << x.join(".env")}
  .reverse
  .select(&:exist?)
  .map(&:read)
  .join

regexp = /^(?<a>\w+)=(?:'(?<b>.+?)'|"\g<b>"|\g<b>)$/m
ENV.update env.scan(regexp).to_h.merge(ENV.to_h)
exec(ENV, *ARGV)
