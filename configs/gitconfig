[core]
  editor = vim
  commentChar = ~
  autocrlf = true
  excludesFile = ~/.config/git/info/ignore

[user]
  name = Kelly Wolf Stannard
  email = kwstannard@gmail.com
  signingKey = 2E8D6C9099081B63CE89C12D34717AC4CF994637

[fetch]
  prune = true

[apply]
  whitespace = fix

[push]
	default = current
  autoSetupRemote = true

[pull]
  rebase = true

[color "status"]
  added = green bold
  changed = yellow bold
  untracked = red bold ul

[color "diff"]
  old = "#ff6666"
  new = "#11ff11"

[branch]
#  autosetupmerge = always
  autosetuprebase = always

[commit]
  gpgSign = true

[diff]
  color = true
  whitespace = red reverse

[alias]
  st = status
  co = checkout
  sw = "!git branch $1; git switch"
  nb = "!git branch $1; git rebase --autostash --onto $(git mainbranch) $1"
	nf = "!git nb $1; git story"
  mainbranch = "!cat .attributes/git/main_branch 2>/dev/null || echo master"
  fcbr = !(git remote | xargs git remote prune) && git branch --merged | grep -v develop | grep -v dev | xargs git branch -d
  xcbr = !git branch --merged | grep -v $(git mainbranch) | grep -v master | xargs git branch -d
  cbr = "!bash -c 'mkdir -p /tmp/diff/f; git checkout od && for b in $(git branch | grep -v \"*\"); do test -n \"$(git config \"branch.$b.keep\")\" || (git merge --no-commit --no-ff $b &>/dev/null; git diff --cached --exit-code > /tmp/diff/$b && git branch -D $b || echo $b was kept; git merge --abort >/dev/null;) done && git checkout -'" -

  l = log
  r = !git l -30 ra = !git r --all
  la = !git l --all

  fu = commit -a -m '[ci skip]' --fixup
  fuh = commit -a --fixup HEAD -m '[ci skip]'
  sq = commit -a --squash
  sqh = commit -a --squash HEAD
  squash = "! git rebase -i --autosquash ${1:-$(git merge-base HEAD $(git mainbranch))} #"

  authorstats = shortlog -sn
  praise = blame
  difw = diff --word-diff
  overview = log --all --oneline --no-merges --since='2 weeks' -15
  pl = pull --log
  graph = log --graph --all --decorate --stat --date=iso
  cf = !git status --porcelain ./ | grep UU | sed 's/UU //'
  note = notes append -m

	conflicted = !nvim +Conflicted

  currentbranch = "! if [ -f .git/rebase-merge/head-name ]; then cat .git/rebase-merge/head-name | sed 's;refs/heads/;;'; else git branch --show-current; fi"

	story = "! git config branch.$(git currentbranch).story"
  branch-stories = "! git config --get-regexp 'branch.*.story' | ruby -pe '$_.gsub!(%(branch.),%()).gsub!(%(.story), %())' | column -t"

	openpr = "! echo TODO"
	openci = "! echo TODO"

	gone = ! git for-each-ref --format '%(refname:short) %(upstream:track)' | awk '$2 == \"[gone]\" {print $1}' | xargs -r git branch -D

	pass = "!bash -c 'test -z $1 && git fuh || git sqh -m $1; git push'" -
	get = pull
[pager]
  diff = diff-so-fancy | less --tabs=1,5 -RFX
  show = diff-so-fancy | less --tabs=1,5 -RFX

[notes]
	rewriteRef = refs/notes/*

[notes "rewrite"]
  squash = true
  amend = true

[filter "tabspace"]
	# smudge = gunexpand --tabs=2 --first-only
	clean = gexpand --tabs=2 --initial

[filter "debugging"]
	clean = ruby -pe '$_.gsub!(/.*/, "")'
